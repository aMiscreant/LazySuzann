#!/bin/bash

# === Setup Colors ===
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'

cecho() {
  case "$1" in
    red) echo -e "${RED}$2${NC}" ;;
    green) echo -e "${GREEN}$2${NC}" ;;
    yellow) echo -e "${YELLOW}$2${NC}" ;;
    blue) echo -e "${BLUE}$2${NC}" ;;
    *) echo "$2" ;;
  esac
}

# === Banner ===
exploit_hunt_banner() {
  clear
  echo -e "${BLUE}"
  echo "╔═════════════════════════════════════════════════╗"
  echo "     🔓 Exploit Hunt - Vulnerability Scanner 🔍    "
  echo "╚═════════════════════════════════════════════════╝"
  echo -e "${NC}"
}

# === Target Storage & Selection ===
get_target() {
  if [[ -f .current_target ]]; then
    target=$(<.current_target)
  else
    target=""
  fi
}

target_manager() {
  while true; do
    exploit_hunt_banner
    echo -e "${YELLOW}[*] Current Targets:${NC}"
    [[ ! -f targets.db ]] && touch targets.db
    mapfile -t targets < targets.db

    if [[ ${#targets[@]} -eq 0 ]]; then
      echo -e "${RED}[!] No saved targets. Add one now.${NC}"
    else
      for i in "${!targets[@]}"; do
        echo " $((i+1))) [${targets[$i]}]"
      done
    fi

    echo
    echo " a) ➕ Add Target"
    echo " r) ❌ Remove Target"
    echo " w) 🧼 Wipe All Targets"
    echo " s) ✅ Select Target"
    echo " b) 🔙 Back"
    echo
    read -p "Choice: " choice

    case "$choice" in
      a)
        read -p "Enter new target (IP or URL): " new_target
        [[ -n "$new_target" ]] && echo "$new_target" >> targets.db
        ;;
      r)
        read -p "Enter target number to remove: " idx
        sed -i "${idx}d" targets.db
        ;;
      w)
        read -p "Are you sure you want to wipe all targets? (y/n): " confirm
        [[ "$confirm" == "y" ]] && > targets.db && echo -e "${GREEN}[*] Wiped all targets.${NC}"
        ;;
      s)
        read -p "Select target number: " idx
        if [[ "$idx" =~ ^[0-9]+$ && $idx -ge 1 && $idx -le ${#targets[@]} ]]; then
          target="${targets[$((idx - 1))]}"
          echo "$target" > .current_target
          echo -e "${GREEN}[✓] Selected: $target${NC}"
          sleep 1
          return
        else
          echo -e "${RED}Invalid selection.${NC}"
        fi
        ;;
      b)
        return
        ;;
      *)
        echo -e "${RED}Invalid option.${NC}"
        ;;
    esac
  done
}

# === Modules ===
mass_scan() {
  while read -r t; do
    echo "[*] Scanning $t..."
    target="$t"
    echo "$target" > .current_target
    nmap_scan
    gobuster_scan
  done < targets.db
}

nmap_scan() {
  exploit_hunt_banner
  get_target
  [[ -z "$target" ]] && cecho red "No target selected!" && sleep 1 && return

  # Strip http/https for the actual scan input
  scan_target=$(echo "$target" | sed 's~^https\?://~~')

  # Sanitize target for file paths
  safe_target=$(echo "$target" | sed 's~[/:]~_~g')
  RESULT_DIR="results/$safe_target"
  mkdir -p "$RESULT_DIR"

  echo -e "${GREEN}[*] Performing Nmap scan on ${scan_target}...${NC}"
  nmap -A -sV -O "$scan_target" -oN "$RESULT_DIR/$safe_target-nmap-results.txt"
  echo -e "${GREEN}[+] Scan complete. Saved as $RESULT_DIR/$safe_target-nmap-results.txt${NC}"
  sleep 3
}

# === Smart Protocol Handling ===
ensure_url_protocol() {
  if [[ "$target" =~ ^https?:// ]]; then
    url="$target"
  else
    echo -e "${YELLOW}[*] No protocol specified. Choose one:${NC}"
    echo " 1) http://"
    echo " 2) https://"
    read -p "Select [1-2]: " proto_choice
    case "$proto_choice" in
      1) url="http://$target" ;;
      2) url="https://$target" ;;
      *) echo -e "${RED}[!] Invalid. Defaulting to http://$target${NC}"; url="http://$target" ;;
    esac
  fi
}

gobuster_scan() {
  exploit_hunt_banner
  get_target
  [[ -z "$target" ]] && echo -e "${RED}No target selected!${NC}" && sleep 1 && return

  ensure_url_protocol

  # Sanitize for file paths (replace : and / with _)
  safe_target=$(echo "$url" | sed 's~[/:]~_~g')

  # Define paths
  RESULT_DIR="results/$safe_target"
  WORDLIST="/usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt"
  OUTPUT="$RESULT_DIR/$safe_target-gobuster-results.txt"
  ERROR_LOG="$RESULT_DIR/gobuster-error.log"

  mkdir -p "$RESULT_DIR"

  echo -e "${GREEN}[*] Running Gobuster on ${url}...${NC}"
  gobuster dir -u "$url" -w "$WORDLIST" -o "$OUTPUT" 2> "$ERROR_LOG"

  if grep -q "x509: cannot validate certificate" "$ERROR_LOG"; then
    echo -e "${YELLOW}[!] Certificate error detected. Retrying with -k (insecure)...${NC}"
    gobuster dir -u "$url" -w "$WORDLIST" -k -o "$OUTPUT" 2>> "$ERROR_LOG"
  fi

  if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}[+] Gobuster complete. Results saved in $OUTPUT${NC}"
  else
    echo -e "${RED}[!] Gobuster failed. See $ERROR_LOG for details.${NC}"
  fi
}


fuzzing_options() {
  exploit_hunt_banner
  echo -e "${YELLOW}Choose a fuzzing method:${NC}"
  echo " 1) Basic Fuzzing"
  echo " 2) Advanced Fuzzing"
  echo " 3) Custom Fuzzing"
  echo " 4) 🔙 Back"
  read -p "Choose [1-4]: " f
  case $f in
    1) echo "[*] Basic fuzzing..." ;;
    2) echo "[*] Advanced fuzzing..." ;;
    3) echo "[*] Custom fuzzing..." ;;
    4) return ;;
    *) echo -e "${RED}Invalid.${NC}"; sleep 1; fuzzing_options ;;
  esac
}

nuclei_scan() {
  get_target
  [[ -z "$target" ]] && echo -e "${RED}No target selected!${NC}" && sleep 1 && return
  echo -e "${GREEN}[*] Running Nuclei...${NC}"
  nuclei -u "$target" -t /path/to/nuclei-templates/ -o "$target-nuclei-results.txt"
}

search_exploits() {
  get_target
  [[ -z "$target" ]] && echo -e "${RED}No target selected!${NC}" && sleep 1 && return
  echo -e "${YELLOW}[*] Searching for exploits for $target...${NC}"
  searchsploit "$target"
}

log_results() {
  get_target
  [[ -z "$target" ]] && echo -e "${RED}No target selected!${NC}" && sleep 1 && return
  echo "Logging..."
  echo "Target: $target" >> "$target-exploit-hunt-log.txt"
  cat "$target"-*results.txt >> "$target-exploit-hunt-log.txt"
  echo -e "${GREEN}[+] Log saved.${NC}"
}

export_results() {
  get_target
  [[ -z "$target" ]] && echo -e "${RED}No target selected!${NC}" && sleep 1 && return
  nmap -oX "$target-nmap-results.xml" "$target"
  xsltproc "$target-nmap-results.xml" -o "$target-nmap-results.html"
  echo -e "${GREEN}[+] Exported to HTML.${NC}"
}

analyze_results() {
  exploit_hunt_banner
  get_target
  [[ -z "$target" ]] && cecho red "No target selected!" && sleep 1 && return

  safe_target=$(echo "$target" | sed 's~[/:]~_~g')
  result_dir="results/$safe_target"

  [[ ! -d "$result_dir" ]] && cecho red "No results found for this target." && sleep 1 && return

  nmap_file="$result_dir/${safe_target}-nmap-results.txt"
  gobuster_file="$result_dir/${safe_target}-gobuster-results.txt"

  cecho yellow "[*] Analyzing results for: $target"
  echo

  # --- Nmap Service Extraction ---
  if [[ -f "$nmap_file" ]]; then
    cecho blue "--- Open Ports & Services (from Nmap) ---"
    grep -E '^[0-9]+/tcp.*open|^[0-9]+/udp.*open' "$nmap_file" | sort | uniq
    echo
    cecho blue "--- OS and Service Info ---"
    grep -iE 'OS:|Service Info:|ssh|ssl-cert|MAC Address' "$nmap_file" | sort | uniq
    echo
  else
    cecho red "[!] Nmap results not found."
  fi

  # --- Gobuster Results ---
  if [[ -f "$gobuster_file" ]]; then
    cecho blue "--- Web Directories (from Gobuster) ---"
    directories=$(sed 's/\x1b\[[0-9;]*m//g' "$gobuster_file" | grep -E '^/' | sort | uniq)
    if [[ -n "$directories" ]]; then
      echo "$directories"
      echo
    else
      cecho red "[!] No directories found."
    fi
  else
    cecho red "[!] Gobuster results not found."
  fi

  # --- Searchsploit Lookups ---
  cecho green "[*] Searching for relevant exploits..."

  services=$(grep -E 'open|ssl' "$nmap_file" | awk '{print $3, $4}' | sort | uniq)

  if [[ -n "$services" ]]; then
    for service in $services; do
      cecho blue "[*] Searching for exploit for: $service"
      searchsploit "$service" | tee -a "$result_dir/exploit-search-results.txt"
    done
  else
    cecho red "[!] No relevant services found to search for exploits."
  fi

  echo
  cecho green "[✓] Analysis complete."

  # === Wait for user input to continue at the end ===
  echo
  read -p "Press 'c' to continue... " continue_choice
  while [[ "$continue_choice" != "c" ]]; do
    read -p "Press 'c' to continue... " continue_choice
  done
}

# === Main Exploit Hunt Menu ===
exploit_hunt_menu() {
  while true; do
    exploit_hunt_banner
    get_target

    if [[ -z "$target" ]]; then
      echo -e "${YELLOW}No target selected. Launching Target Manager...${NC}"
      sleep 1
      target_manager
      get_target
      [[ -z "$target" ]] && echo -e "${RED}Still no target. Returning to main...${NC}" && sleep 1 && return
    fi

    echo -e "${YELLOW}[*] Current Target: $target${NC}"
    echo
    echo " 1) Run Advanced Scan (Ports, Services, OS)"
    echo " 2) Run Web Directory Fuzzing"
    echo " 3) Fuzz Inputs (SQLi, XSS, etc.)"
    echo " 4) Run Vulnerability Scan (Nuclei)"
    echo " 5) Search for Known Exploits"
    echo " 6) Log Results"
    echo " 7) Export Results"
    echo " 8) Manage Targets"
    echo " 9) 🔍 Analyze Scan Results"
    echo " 10) 🔙 Back to Main Menu"
    read -p "Option [1-10]: " choice

    case "$choice" in
      1) nmap_scan ;;
      2) gobuster_scan ;;
      3) fuzzing_options ;;
      4) nuclei_scan ;;
      5) search_exploits ;;
      6) log_results ;;
      7) export_results ;;
      8) target_manager ;;
      9) analyze_results ;;
      10) bash LazySuzann.sh ;;
      *) echo -e "${RED}Invalid choice.${NC}" && sleep 5;;
    esac
  done
}

# === Start ===
exploit_hunt_menu
